{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Monkey X",
  "scopeName": "source.monkeyx",
  "patterns": [
    {
      "include": "#strict-directive"
    },
    {
      "include": "#import-statement"
    },
    {
      "include": "#visibility-directive"
    },
    {
      "include": "#const-declaration"
    },
    {
      "include": "#global-declaration"
    },
    {
      "include": "#function-declaration"
    },
    {
      "include": "#class-declaration"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "strict-directive": {
      "patterns": [
        {
          "begin": "(?i:\\b(Strict)\\b)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.strict.monkeyx"
            }
          },
          "end": "(?=$)"
        }
      ]
    },
    "import-statement": {
      "patterns": [
        {
          "begin": "\\b(Import)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.import.monkeyx"
            }
          },
          "end": "(?=\\r?\\n|\\r)",
          "patterns": [
            {
              "include": "#module-path"
            },
            {
              "include": "#string-literal"
            }
          ]
        }
      ]
    },
    "visibility-directive": {
      "patterns": [
        {
          "name": "storage.modifier.monkeyx",
          "match": "(?i:\\b(Private|Public|Extern|Extern Private)\\b)"
        }
      ]
    },
    "const-declaration": {
      "patterns": [
        {
          "begin": "(?i:\\b(Const)\\b\\s*([_[:alpha:]][_[:alnum:]]*)\\s*:?\\s*(\\$|\\?|#|%|[_[:alpha:]][_[:alnum:]]*)?\\s*(=)\\s*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.const.monkeyx"
            },
            "2": {
              "name": "variable.other.monkeyx"
            },
            "3": {
              "name": "storage.type.monkeyx"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "global-declaration": {
      "patterns": [
        {
          "begin": "(?i:\\b(Global)\\b\\s*([_[:alpha:]][_[:alnum:]]*)\\s*:?\\s*(\\$|\\?|#|%|[_[:alpha:]][_[:alnum:]]*)?\\s*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.global.monkeyx"
            },
            "2": {
              "name": "variable.other.monkeyx"
            },
            "3": {
              "name": "storage.type.monkeyx"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "function-declaration": {
      "patterns": [
        {
          "begin": "(?i:\\b(Function)\\b\\s*([^\\s:\\(]+)([^\\(]*))",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.function.monkeyx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#identifier"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#type-reference"
                }
              ]
            }
          },
          "end": "(?i:\\b(End Function|End)\\b)",
          "endCaptures": {
            "1": {
              "name": "keyword.other.function.monkeyx"
            }
          }
        }
      ]
    },
    "class-declaration": {
      "patterns": [
        {
          "begin": "(?i:\\b(Class)\\b\\s*([^\\s]+))",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.class.monkeyx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#identifier"
                }
              ]
            }
          },
          "end": "(?i:\\b(End Class|End)\\b\\s*)",
          "endCaptures": {
            "1": {
              "name": "keyword.other.class.monkeyx"
            }
          },
          "patterns": [
            {
              "include": "#const-declaration"
            },
            {
              "include": "#global-declaration"
            },
            {
              "include": "#function-declaration"
            }
          ]
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#if-statement"
        }
      ]
    },
    "if-statement": {
      "patterns": [
        {
          "begin": "\\b(?i:If)\\b\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.if.monkeyx"
            }
          },
          "end": "\\b(?i:Endif|End If|End)\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.conditional.if.monkeyx"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            },
            {
              "include": "#statement"
            }
          ]
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#bool-literal"
        },
        {
          "include": "#float-literal"
        },
        {
          "include": "#int-literal"
        }
      ]
    },
    "module-path": {
      "name": "meta.module-path.monkeyx",
      "patterns": [
        {
          "match": "([_[:alpha:]][_[:alnum:]]*)(\\.([_[:alpha:]][_[:alnum:]]*))"
        }
      ]
    },
    "type-declaration": {
      "patterns": [
        {
          "match": ":?\\s*"
        },
        {
          "include": "#type-reference"
        }
      ]
    },
    "type-reference": {
      "patterns": [
        {
          "include": "#shorthand-type-reference"
        },
        {
          "name": "storage.type.monkeyx",
          "begin": "^",
          "end": "$",
          "patterns": [
            {
              "include": "#module-path"
            },
            {
              "match": "\\."
            },
            {
              "include": "#identifier"
            },
            {
              "include": "#generic-type-arguments"
            },
            {
              "include": "#index-operator"
            }
          ]
        }
      ]
    },
    "shorthand-type-reference": {
      "patterns": [
        {
          "name": "storage.type.monkeyx",
          "match": "(\\$|\\?|#|%)(\\[\\])?"
        }
      ]
    },
    "generic-type-arguments": {
      "patterns": [
        {
          "begin": "<",
          "end": ">",
          "patterns": [
            {
              "include": "#type-reference"
            },
            {
              "match": ",\\s*"
            }
          ]
        }
      ]
    },
    "index-operator": {
      "patterns": [
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#expression"
            },
            {
              "match": ",\\s*"
            }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "(^\\s+)?(?=')",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.monkeyx"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.line.monkeyx",
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.monkeyx"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "[_[:alpha:]][_[:alnum:]]*"
        }
      ]
    },
    "string-literal": {
      "name": "string.quoted.double.monkeyx",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.monkeyx",
          "match": "~(q|n|r|t|z|~)"
        }
      ]
    },
    "bool-literal": {
      "patterns": [
        {
          "name": "constant.language.monkeyx",
          "match": "(?i:\\b(False|True)\\b)"
        }
      ]
    },
    "float-literal": {
      "patterns": [
        {
          "name": "constant.numeric.monkeyx",
          "match": "[0-9]*\\.[0-9]+"
        }
      ]
    },
    "int-literal": {
      "patterns": [
        {
          "name": "constant.numeric.monkeyx",
          "match": "[0-9]+"
        }
      ]
    }
  }
}
